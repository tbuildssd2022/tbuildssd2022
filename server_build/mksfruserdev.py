#!/bin/env python3
# Author(s): Doug Leece
# Version history: Feb 21/2022 - Initial creation
#                   Mar 3/2022 - Adding default group for user creation
# 
# Notes: One of two command line interfaces built to support the creation, updating and deleting of datauser accounts
# Assumption is the administrators will be connecting to a support server via SSH and this server will have host based
# access to the application database. Current limitation is a hardcoded credential set for datbase connections, migrate 
# to an environment variable method if time permits. 
# 
#######################################################################################################################

from werkzeug.security import generate_password_hash
import getpass
import usermgtutil


# This function takes the user's unique numeric ID, generated by the database and the paswword input by the administrator
# to create a credential management record for the new user. The record also prefills the mandatory boolean fields used for
# tracking whether an account is locked or disabled. 
# The password is displayed to the screen to allow the administrator to confirm their typing. This could also be addressed
# with a confirmation step in the inital password input section if there are concerns with shoulder surfing.
#
# Warning this menu currently contains database credentials due to development time constraints, convert to stronger
# credential management as soon as time permits.

def newuserauthnz(pwd,shpwd,uid):
    print("This is the current password: {}".format(pwd))

    #print("This is the pbkdf2 hash value: {}".format(shpwd[20:]))
    # create generation SQL
    regdate=usermgtutil.getcurdate()
    newusercred = ''' INSERT into userauthnz(id,userpasswd,userlocked,forcepwdchange,activestatus,userregistration) \
        VALUES(%s,%s,%s,%s,%s,%s)'''
    valuestuple=(int(uid),shpwd,0,0,1,regdate)
    print(valuestuple)
    try:
            thisdbh=usermgtutil.devdbconnect('10.100.200.4','devuser','THEd3vCr3d3#Ssjhq4s','sfrdev')
            thiscur=thisdbh.cursor()
            result=thiscur.execute(newusercred, valuestuple)
            thisdbh.commit()
            thisdbh.close()
            return result
    except Exception as err:
            print(err)
            return None


def createdatauser(ufn,usn,udn,aid,ua,ag):
    newusersql= ''' INSERT into datauser(userforename,usersurname,userdisplayname,useraccessid,useragency,authgroups) VALUES (%s,%s,%s,%s,%s,%s) '''
    valuestuple= (ufn,usn,udn,aid,ua,ag) 
    try:
            thisdbh=usermgtutil.devdbconnect('10.100.200.4','devuser','THEd3vCr3d3#Ssjhq4s','sfrdev')
            thiscur=thisdbh.cursor()
            result=thiscur.execute(newusersql, valuestuple)
            thisdbh.commit()
            thisdbh.close()
            return result
    except Exception as err:
            print(err)
            return None

def getuserid(accessid):
    uidsql = "SELECT userid,useraccessid from datauser WHERE useraccessid='{}'".format(accessid)
    try:
        thisdbh=usermgtutil.devdbconnect('10.100.200.4','devuser','THEd3vCr3d3#Ssjhq4s','sfrdev')
        thiscur=thisdbh.cursor()
        result=thiscur.execute(uidsql)
        # get file meta data needed for download and the file data stored as bytes in the database
        recordstuple = thiscur.fetchone()
        uid=recordstuple[0]  
        aid=recordstuple[1]
        thisdbh.close()
        return uid
    except Exception as err:
            print(err)
            return None

      


def main():
    quit=False
    while(not quit):
        #  Do all the intial user information collection
        print("Creating new user account for SFR")
        print("-----------------------------------\n")
        print("Collecting User information first:")
        userforename=input("User's legal forename (first, formal)?: ")
        usersurname=input("User's legal surname (last)?: ")
        userdisplayname=input("Name user commonly goes by, first or first last: ")
        print("create user's access id in the following format:\n 2 character code for space agency \n 3 digits,first inital,2 digits, last inital")
        useraccessid=input("Access ID for user, AAdddIddi: ")  # 10 character string high entropy
        print("Space agency user is affiliated with, Canada,Europe,Japan,Russia,USA ")
        useragency=input("Space agency affiliation: ")
        print(usermgtutil.checkuseragency(useragency))
        if usermgtutil.checkuseragency(useragency) != 99:
            authgroups=usermgtutil.checkuseragency(useragency)
        else:
            print("invalid user agency, must be one of : Canada,Europe,Japan,Russia,USA")
            continue
        # insert into DB
        nduresult=createdatauser(userforename,usersurname,userdisplayname,useraccessid,useragency,authgroups)
        if nduresult is not None:
            print(dir(nduresult))
        # get the numeric user identifier
        thisuid=getuserid(useraccessid)
        if thisuid is None:
            print("error retrieving userid for account {}: ".format(useraccessid))
            answer=input("exit and investigate? (y/n):")
            if answer[:1].lower() == 'y':
                quit=True

        # prompt for password, use werkzeug.security hashing function to generate the salted password.
        print("Creating new user credentials for SFR")
        pwdcheck=False
        while(not pwdcheck):
            pwd = getpass.getpass(prompt="Enter min 10 character password: ")
            shpwd=usermgtutil.checkgenpasswd(pwd)
            if shpwd:
                newuserauthnz(pwd,shpwd,thisuid)
                pwdcheck=True 

        # End of user creation and inital authnz setup
        answer=input("continue creating users? (y/n):")
        if answer[:1].lower() == 'n':
            quit=True


if __name__ == '__main__':
    main()